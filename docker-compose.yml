networks:
  # This network is created by the nextcloud-aio-mastercontainer container and referenced by protonmail-bridge-nextcloud
  nextcloud-aio:
    external: true


volumes:
  # This line is not allowed to be changed as otherwise the built-in backup solution will not work
  nextcloud_aio_mastercontainer:
    name: nextcloud_aio_mastercontainer

  # Ghost
  ghost:
  ghost_db:

services:

  # Cloudflare Tunnel to use as reverse proxy for external access to services
  cloudflared-tunnel:
    # Container
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run

    # Environment
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}

    # Networking
    network_mode: host

    # Config
    restart: unless-stopped


  # Nextcloud
  nextcloud:
    # Container
    container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed as otherwise AIO will not work correctly
    image: nextcloud/all-in-one:latest

    # Environment
    environment:
      # Needed to work on Cloudflare Tunnel
      - APACHE_PORT=11000
      - SKIP_DOMAIN_VALIDATION=true
      - APACHE_IP_BINDING=0.0.0.0

      # Config
      - NEXTCLOUD_DATADIR=${NEXTCLOUD_DATADIR} # ⚠️⚠️⚠️ Warning: do not set or adjust this value after the initial Nextcloud installation is done!
      - NEXTCLOUD_MEMORY_LIMIT=${NEXTCLOUD_MEMORY_LIMIT}

      # Prefs
      - AIO_DISABLE_BACKUP_SECTION=true

    # Mounts
    volumes:
      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config # This line is not allowed to be changed as otherwise the built-in backup solution will not work
      - /var/run/docker.sock:/var/run/docker.sock:ro # If adjusting, don't forget to also set 'WATCHTOWER_DOCKER_SOCKET_PATH'!

    # Networking
    ports:
      - 8080:8080

    # Config
    restart: unless-stopped


  # Proton VPN Docker
  # Creates a network service for connecting to Proton VPN
  # Env PROTON_SERVER must be a user or system variable when running docker compose up
  protonwire:
    # Container
    container_name: protonwire
    image: ghcr.io/tprasadtp/protonwire:latest
    init: true
    cap_add:
      - NET_ADMIN # mandatory!

    # Environment
    environment:
      - PROTONVPN_SERVER=${PROTON_SERVER}
      - DEBUG="0"
      - KILL_SWITCH="1"

    # Mounts
    volumes:
      - type: tmpfs
        target: /tmp
      - type: bind
        source: /etc/docker/protonwire/keys/private.key
        target: /etc/protonwire/private-key
        read_only: true
      - /etc/docker/protonwire/scripts:/scripts

    # Networking
    ports:
      - 58000:58000 # Caddy HTTP
      - 54430:54430 # Caddy HTTPS
      - 59999:59999 # whereami
      - 8266:8266 # Tdarr
      - 57878:57878 # Radarr
      - 7878:7878 # Unpackerr
      - 58989:58989 # Sonarr
      - 56767:56767 # Bazarr
      - 58080:58080 # qbittorrent
      - 59117:59117 # Jackett
      - 5055:5055 # Jellyseerr
      - 8096:8096 # Jellyfin

    # Config
    restart: unless-stopped
    sysctls:
      net.ipv4.conf.all.rp_filter: 2 # sysctl net.ipv4.conf.all.rp_filter is mandatory!
      net.ipv6.conf.all.disable_ipv6: 1 # disables IPv6 as protonVPN does not support IPv6.


  # Caddy Reverse Proxy
  # Used for:
  # 1) Setting the endpoint for ip.basingse.top
  # 2) Being the authentication layer for tdarr.basingse.top
  caddy:
    # Container
    container_name: caddy
    image: caddy
    build:
      context: /etc/docker/caddy
      dockerfile: Dockerfile

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - /etc/docker/caddy/config:/config

    # Config
    restart: unless-stopped


  # Jellyseerr
  jellyseerr:
    # Container
    container_name: jellyseerr
    image: ghcr.io/hotio/jellyseerr:latest

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/jellyseerr/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Jellyfin
  jellyfin:
    # Container
    container_name: jellyfin
    image: ghcr.io/hotio/jellyfin:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/jellyfin/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Radarr
  radarr:
    # Container
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/radarr/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Sonarr
  sonarr:
    # Container
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/sonarr/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Bazarr
  bazarr:
    # Container
    container_name: bazarr
    image: ghcr.io/hotio/bazarr:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/bazarr/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Jackett
  jackett:
    # Container
    container_name: jackett
    image: ghcr.io/hotio/jackett:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/jackett/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # qbittorrent
  qbittorrent:
    # Container
    container_name: qbittorrent
    image: ghcr.io/hotio/qbittorrent:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/qbittorrent/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Unpackerr
  unpackerr:
    # Container
    container_name: unpackerr
    image: ghcr.io/hotio/unpackerr:latest

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
      - UN_RADARR_0_URL=http://0.0.0.0:7878
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
      - UN_SONARR_0_URL=http://0.0.0.0:8989
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}


    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/unpackerr/config:/config
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # Tdarr
  # For encoding media files
  tdarr:
    # Container
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    depends_on:
      - caddy

    # Environment
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK_SET=002
      - TZ=${TZ}
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - nodeName=eric-basingse

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/tdarr/server:/app/server
      - /etc/docker/tdarr/config:/app/configs
      - /etc/docker/tdarr/logs:/app/logs
      - /etc/docker/tdarr/transcode_cache:/temp
      - ${MEDIA_DIR}:/media

    # Config
    restart: unless-stopped


  # FlareSolverr
  flaresolverr:
    # Container
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest

    # Environment
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}

    # Networking
    network_mode: service:protonwire

    # Config
    restart: unless-stopped


  # Photoprism
  photoprism:
    # Container
    container_name: photoprism
    image: photoprism/photoprism:latest
    depends_on:
      - mariadb

    # Security
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined

    # Environment
    environment:
      - PHOTOPRISM_ORIGINALS_PATH=/photoprism/originals
      - PHOTOPRISM_STORAGE_PATH=/photoprism/storage

      - PHOTOPRISM_ADMIN_USER=${PHOTOPRISM_USER}     # admin login username
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_PASS} # initial admin password (8-72 characters)
      - PHOTOPRISM_AUTH_MODE=password                # authentication mode (public, password)
      - PHOTOPRISM_SITE_URL=https://photoprism.${BASE_URL}
      - PHOTOPRISM_DISABLE_TLS=true                  # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
      # - PHOTOPRISM_DEFAULT_TLS=true                  # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
      - PHOTOPRISM_ORIGINALS_LIMIT=5000              # file size limit for originals in MB (increase for high-res video)
      - PHOTOPRISM_HTTP_COMPRESSION=gzip             # improves transfer speed and bandwidth utilization (none or gzip)
      - PHOTOPRISM_LOG_LEVEL=info                    # log level=trace, debug, info, warning, error, fatal, or panic
      - PHOTOPRISM_READONLY=false                    # do not modify originals directory (reduced functionality)
      - PHOTOPRISM_EXPERIMENTAL=false                # enables experimental features
      - PHOTOPRISM_DISABLE_CHOWN=false               # disables updating storage permissions via chmod and chown on startup
      - PHOTOPRISM_DISABLE_WEBDAV=false              # disables built-in WebDAV server
      - PHOTOPRISM_DISABLE_SETTINGS=false            # disables settings UI and API
      - PHOTOPRISM_DISABLE_TENSORFLOW=false          # disables all features depending on TensorFlow
      - PHOTOPRISM_DISABLE_FACES=false               # disables face detection and recognition (requires TensorFlow)
      - PHOTOPRISM_DISABLE_CLASSIFICATION=false      # disables image classification (requires TensorFlow)
      - PHOTOPRISM_DISABLE_VECTORS=false             # disables vector graphics support
      - PHOTOPRISM_DISABLE_RAW=false                 # disables indexing and conversion of RAW images
      - PHOTOPRISM_RAW_PRESETS=false                 # enables applying user presets when converting RAW images (reduces performance)
      - PHOTOPRISM_JPEG_QUALITY=85                   # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      - PHOTOPRISM_DETECT_NSFW=false                 # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      - PHOTOPRISM_UPLOAD_NSFW=true                  # allows uploads that MAY be offensive (no effect without TensorFlow)
      # - PHOTOPRISM_DATABASE_DRIVER=sqlite          # SQLite is an embedded database that doesn't require a server
      - PHOTOPRISM_DATABASE_DRIVER=mysql             # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      - PHOTOPRISM_DATABASE_SERVER=mariadb:3306      # MariaDB or MySQL database server (hostname:port)
      - PHOTOPRISM_DATABASE_NAME=photoprism          # MariaDB or MySQL database schema name
      - PHOTOPRISM_DATABASE_USER=photoprism          # MariaDB or MySQL database user name
      - PHOTOPRISM_DATABASE_PASSWORD=insecure        # MariaDB or MySQL database user password
      - PHOTOPRISM_SITE_CAPTION=AI-Powered Photos App
      - PHOTOPRISM_SITE_DESCRIPTION=""               # meta site description
      - PHOTOPRISM_SITE_AUTHOR=""                    # meta site author
      - PHOTOPRISM_UID=1000
      - PHOTOPRISM_GID=1000
      - PHOTOPRISM_UMASK=002

    # Networking
    ports:
      - 2342:2342

    # Share hardware devices with FFmpeg and TensorFlow (optional):
    devices:
      - /dev/dri:/dev/dri                         # Intel QSV
    #  - "/dev/nvidia0:/dev/nvidia0"                 # Nvidia CUDA
    #  - "/dev/nvidiactl:/dev/nvidiactl"
    #  - "/dev/nvidia-modeset:/dev/nvidia-modeset"
    #  - "/dev/nvidia-nvswitchctl:/dev/nvidia-nvswitchctl"
    #  - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    #  - "/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools"
    #  - "/dev/video11:/dev/video11"                 # Video4Linux Video Encode Device (h264_v4l2m2m)

    # Mounts
    working_dir: "/photoprism" # do not change or remove
    volumes:
      - ${MEDIA_DIR}/content/Photos:/photoprism/originals     # Original media files (DO NOT REMOVE)
      - /etc/docker/photoprism/storage:/photoprism/storage    # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)

    # Config
    restart: unless-stopped
    stop_grace_period: 10s


  # Maria Database Server (recommended by Photoprism)
  # see https://docs.photoprism.app/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  mariadb:
    container_name: photoprism-mariadb
    image: mariadb:10.11
    command: mariadbd --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120

    # Security
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined

    # Environment
    environment:
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_INITDB_SKIP_TZINFO=1
      - MARIADB_DATABASE=photoprism
      - MARIADB_USER=photoprism
      - MARIADB_PASSWORD=insecure
      - MARIADB_ROOT_PASSWORD=insecure

    # Mounts
    volumes:
      - /etc/docker/photoprism/database:/var/lib/mysql

    # Config
    restart: unless-stopped
    stop_grace_period: 5s


  # Cronicle
  cronicle:
    # Container
    container_name: cronicle
    image: bluet/cronicle-docker:latest
    hostname: cronicle

    # Environment
    environment:
      - TZ=${TZ}
      - CRONICLE_base_app_url=https://cron.${BASE_URL}
      - CRONICLE_email_from=${SMTP_EMAIL_FROM}
      - CRONICLE_smtp_hostname=127.0.0.1
      - CRONICLE_smtp_port=1025
      - CRONICLE_ssl_cert_bypass=1
      - CRONICLE_mail_options__secure=0
      - CRONICLE_mail_options__auth__user=${SMTP_AUTH_USER}
      - CRONICLE_mail_options__auth__pass=${SMTP_AUTH_PASS}
      - CRONICLE_mail_options__connectionTimeout=10000
      - CRONICLE_mail_options__greetingTimeout=10000
      - CRONICLE_mail_options__socketTimeout=10000
      - CRONICLE_NODE_TLS_REJECT_UNAUTHORIZED=0
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CRONICLE_web_hook_custom_opts__rejectUnauthorized=0
      - CRONICLE_web_hook_ssl_cert_bypass=0

    # Network
    network_mode: host

    # Mounts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/docker/cronicle/ssh:/root/.ssh

      - /etc/docker/cronicle/data:/opt/cronicle/data
      - /etc/docker/cronicle/logs:/opt/cronicle/logs
      - /etc/docker/cronicle/plugins:/opt/cronicle/plugins
      - /etc/docker/cronicle/app:/app

    # Config
    restart: unless-stopped


  # Proton Mail Bridge
  # SMTP server for general use
  protonmail-bridge:
    # Container
    container_name: protonmail-bridge
    image: shenxn/protonmail-bridge
    depends_on:
      - nextcloud
    entrypoint: sh -c "/scripts/entrypoint.sh"

    # Enables user login from shell
    tty: true
    stdin_open: true

    # Networking
    ports:
      # SMTP
      - 1025:25/tcp
      # IMAP
      - 1143:143/tcp

    # Mounts
    volumes:
      - /etc/docker/protonmail-bridge/scripts:/scripts
      - /etc/docker/protonmail-bridge/root:/root

    # Config
    restart: unless-stopped


  # Proton Mail Bridge
  # SMTP server for Nextcloud
  protonmail-bridge-nextcloud:
    # Container
    container_name: protonmail-bridge-nextcloud
    image: shenxn/protonmail-bridge
    depends_on:
      - nextcloud
      - protonmail-bridge
    entrypoint: bash -c "sleep 12 && /scripts/entrypoint_minion.sh"

    # Enables user login from shell
    tty: true
    stdin_open: true

    # Networking
    networks:
      - nextcloud-aio

    # Mounts
    volumes:
      - /etc/docker/protonmail-bridge/scripts:/scripts
      - /etc/docker/protonmail-bridge/nextcloud:/root

    # Config
    restart: unless-stopped


  # Proton Mail Bridge
  # SMTP server for services running on the VPN
  protonmail-bridge-vpn:
    # Container
    container_name: protonmail-bridge-vpn
    image: shenxn/protonmail-bridge
    depends_on:
      - protonmail-bridge
    entrypoint: bash -c "sleep 12 && /scripts/entrypoint_minion.sh"

    # Enables user login from shell
    tty: true
    stdin_open: true

    # Networking
    network_mode: service:protonwire

    # Mounts
    volumes:
      - /etc/docker/protonmail-bridge/scripts:/scripts
      - /etc/docker/protonmail-bridge/vpn:/root

    # Config
    restart: unless-stopped


  # alertmanager for Prometheus
  alertmanager:
    # Container
    container_name: alertmanager
    image: prom/alertmanager

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/alertmanager:/etc/alertmanager

    # Command
    command:
      - '--config.file=/etc/alertmanager/alertmanager.conf'


  # Prometheus
  prometheus:
    # Container
    container_name: prometheus
    image: prom/prometheus
    user: "1000"

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/prometheus/:/prometheus

    # Command
    command:
      - '--config.file=/prometheus/prometheus.yml'
      - '--web.config.file=/prometheus/web-config.yml'

    # Config
    restart: unless-stopped


  # Grafana
  grafana:
    # Container
    container_name: grafana
    image: grafana/grafana
    user: "1000"

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/all.yaml
      - /etc/docker/grafana/config.ini:/etc/grafana/config.ini
      - /etc/docker/grafana/grafana:/var/lib/grafana

    # Command
    command:
      - '--config=/etc/grafana/config.ini'

    # Environment
    environment:
      - GF_SMTP_PASSWORD=${SMTP_AUTH_PASS}

    # Config
    restart: unless-stopped


  # Node Exporter for system metrics
  node-exporter:
    # Container
    container_name: node-exporter
    image: prom/node-exporter:latest

    # Mounts
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

    # Command
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

    # Networking
    network_mode: host

    # Config
    restart: unless-stopped


  # Prometheus Push Gateway
  pushgateway:
    # Container
    image: prom/pushgateway
    container_name: pushgateway

    # Networking
    ports:
      - 9091:9091

    # Config
    restart: unless-stopped


  # Process exporter for system metrics
  process-exporter:
    # Container
    container_name: process-exporter
    image: process-exporter
    build:
      context: /etc/docker/process-exporter
      dockerfile: Dockerfile

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/process-exporter/ssh:/root/.ssh

    # Config
    restart: unless-stopped


  # Gotify
  gotify:
    # Container
    container_name: gotify
    image: gotify/server

    # Networking
    ports:
      - 4090:80

    # Mounts
    volumes:
      - "/etc/docker/gotify:/app/data"

    # Config
    restart: unless-stopped


  # Webhook
  webhook:
    container_name: webhook
    image: thecatlady/webhook

    # Command
    command: -template -verbose -hooks=hooks.json -hotreload

    # Environment
    environment:
      - HOOK_TOKEN=${HOOK_TOKEN}
      - HOOK_SECRET=${HOOK_SECRET}

    # Networking
    ports:
      - 9000:9000

    # Mounts
    volumes:
      - /etc/docker/webhook:/config

    # Config
    restart: unless-stopped


  # Bitwarden REST API Server
  bitwarden-rest-api-server:
    # Container
    container_name: bitwarden-rest-api-server
    image: ebette1/bitwarden-rest-api-server:latest

    # Environment
    environment:
      - BW_CLIENTID=${BW_CLIENTID}
      - BW_CLIENTSECRET=${BW_CLIENTSECRET}
      # - BITWARDENCLI_DEBUG=true

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/bitwarden-rest-api-server:/root/.config

    # Config
    restart: no


  # Badge Server
  badge-server:
    # Container
    container_name: badge-server
    image: ebette1/badge-server:latest

    # Networking
    ports:
      - 3031:3031
      - 9191:9191

    # Mounts
    volumes:
      - /etc/docker/bank-exporter/bank_scrapers-tests:/tests/bank_scrapers

    # Config
    restart: unless-stopped


  # Ghost
  ghost:
    # Container
    container_name: ghost
    image: ghost:5-alpine

    # Environment
    environment:
      database__client: mysql
      database__connection__host: 0.0.0.0
      database__connection__port: 9999
      database__connection__user: root
      database__connection__password: ghost
      database__connection__database: ghost
      url: https://ghost.${BASE_URL}
      mail__transport: SMTP
      mail__options__host: 0.0.0.0
      mail__options__port: 1025
      mail__options__auth__user: ${SMTP_AUTH_USER}
      mail__options__auth__pass: ${SMTP_AUTH_PASS}
      mail__options__from: ${SMTP_EMAIL_FROM}

    # Networking
    network_mode: host

    # Mounts
    volumes:
      - /etc/docker/ghost/content:/var/lib/ghost/content

    # Config
    restart: unless-stopped
    depends_on:
      - ghost_db


  ghost_db:
    container_name: ghost_db
    image: mysql:8.0

    # Environment
    environment:
      MYSQL_ROOT_PASSWORD: ghost

    # Networking
    ports:
      - 9999:3306

    # Mounts
    volumes:
      - /etc/docker/ghost/db:/var/lib/mysql

    # Config
    restart: unless-stopped
